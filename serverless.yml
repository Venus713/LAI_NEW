# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: LAI_NEW
app: lai-new
org: lai-new

frameworkVersion: '2'

custom:
  projectName: lai-new
  stage: dev
  region: us-west-2
  dynamoDBTableName: ${self:custom.projectName}-${self:custom.stage}-table
  s3BucketName: ${self:custom.projectName}-${self:custom.stage}-bucket
  userPoolName: ${self:custom.projectName}-${self:custom.stage}
  clientName: ${self:custom.projectName}-client
  domainName: ${self:custom.projectName}-${self:custom.stage}
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  environment:
    DB_TABLE_NAME: ${self:custom.dynamoDBTableName}
    S3_BUCKET_NAME: ${self:custom.s3BucketName}
    APP_REGION: ${self:custom.region}
    USER_POOL_ID: !Ref CognitoUserPool
    USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
    CALL_BACK_URL: ${file(config/env.yml):${self:custom.stage}.callBackUrl}

iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource:
      - "Fn::GetAtt": [ UserTable, Arn ]
  - Effect: 'Allow'
    Action:
      - 's3:PutObject'
      - 's3:GetObject'
      - 's3:ListBucket'
    Resource: 
      - "arn:aws:s3:::${self:custom.s3BucketName}/*"
      - "arn:aws:s3:::${self:custom.s3BucketName}"

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-python-requirements
  - serverless-offline

functions:
  - ${file(src/auth/functions.yml)}

  #    The following are a few example events you can configure
  #    NOTE: Please make sure to change your handler code to work with those events
  #    Check the event documentation for details
  #    events:
  #      - httpApi:
  #          path: /users/create
  #          method: get
  #      - websocket: $connect
  #      - s3: ${env:BUCKET}
  #      - schedule: rate(10 minutes)
  #      - sns: greeter-topic
  #      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
  #      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
  #      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
  #      - iot:
  #          sql: "SELECT * FROM 'some_topic'"
  #      - cloudwatchEvent:
  #          event:
  #            source:
  #              - "aws.ec2"
  #            detail-type:
  #              - "EC2 Instance State-change Notification"
  #            detail:
  #              state:
  #                - pending
  #      - cloudwatchLog: '/aws/lambda/hello'
  #      - cognitoUserPool:
  #          pool: MyUserPool
  #          trigger: PreSignUp
  #      - alb:
  #          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
  #          priority: 1
  #          conditions:
  #            host: example.com
  #            path: /hello

  #    Define function environment variables here
  #    environment:
  #      variable2: value2

resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  - ${file(resources/s3-bucket.yml)}
